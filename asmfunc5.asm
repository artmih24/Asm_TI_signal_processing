
   .global _asmfunc5

   .global _x

_asmfunc5:

	; Задача
	; Осуществить на процессоре вычисление значения:
	; 1.1 * х1 + 2.2 * х2 + 3.3 * х3 + 4.4 * х4
	; при этом xl = 1, х2 = 2, хЗ = 3, х4 = 4; "х" - массив.
	; Считать, что величины находятся в регистрах процессора Al, А2, Bl, В2 соотв.
	; Результат поместить в регистр АО. Все математические действия должны быть выполнены
	;  вычислительными блоками процессора.

	MV		B3, A10 ; копируем адрес возврата в Си-программу в отдельный регистр, т.к. B3 будет использоваться

	; инициализация Float-Point констант в теле Асм-подпрограммы
	MVKL	0x3F8CCCCD, A1	; загрузка в регистр дробного 32-разрядного числа (младшая часть, 16-разр.)
	MVKH	0x3F8CCCCD, A1	; -//- (старшая часть, 16-разр.); 1.1 -> A1

	MVKL	0x400CCCCD, A2	; = 2.2 -> A2
	MVKH	0x400CCCCD, A2	;

	MVKL	0x40533333, B1	; = 3.3 -> B1
	MVKH	0x40533333, B1	;

	MVKL	0x408CCCCD, B2	; = 4.4 -> B2
	MVKH	0x408CCCCD, B2	;

	MVKL	_x, A7 ; копируем адрес массива "x" (по сути, адрес его первого элемента) в регистр А7
	MVKH	_x, A7 ; - адресный регистр

	LDW		*A7, A3 ; или *+A7[0], A3 - загрузка значения в регистр А3 из ячейки памяти по адресу из А7
	NOP 	4

	MPYSP 	A1, A3, A4 	; 1.1*x1 -> A4
	NOP		3 			;  в А3 запишется значение первого элемента массива "х"; x1 -> A3

	LDW 	*+A7[1], A3 ; сдвиг значения адреса на 1 элемент (1 элемент FLoatPoint = 4 байта,
	NOP 	4 		   	;  т.е. сдвиг на 4 байта вправо), при этом само значение в A7 не меняется; x2 -> A3

	MPYSP 	A3, A2, A5 ; 2.2*x2 -> A5
	NOP		3

	ADDSP 	A4, A5, A6 ; (1.1*x1) + (2.2*x2) -> A6
	NOP		3

	LDW 	*+A7[2], B3 ; сдвиг значения адреса на 2 элемента (т.е. сдвиг на 2*4 байт вправо)
	NOP		4			;  само значение в A7 не меняется; x3 -> B3

	MPYSP 	B1, B3, B4 	; 3.3*x3 -> B4
	NOP		3

	LDW 	*+A7[3], B3	; сдвиг значения адреса на 3 элемента (т.е. сдвиг на 3*4 байт вправо)
	NOP	4				;  само значение в A7 не меняется; x4 -> B3

	MPYSP 	B3, B2, B5 	; 4.4*x4 -> B5
	NOP		3

	ADDSP 	B4, B4, B6 	; (3.3*x3) + (4.4*x4) -> B6
	NOP		3

	ADDSP 	A6, B6, A0 	; ( (1.1*x1) + (2.2*x2) ) + ( (3.3*x3) + (4.4*x4) ) -> A0
	NOP		3

	STW 	A0, *+A7[4]	; сдвиг значения адреса на 4 элемента (т.е. сдвиг на 4*4 байт вправо)
	NOP					;  запись результата в последний элемент массива, т.е. A0 -> x5

	MV		A0, A4 		; дублируем результат для вывода через параметр Асм-функции

	B       A10 ; выход из Asm-подпрограммы и возвращение в основную Си-программу
	NOP     5

