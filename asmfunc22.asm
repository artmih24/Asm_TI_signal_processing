
   .global _asmfunc22

_asmfunc22:

   	; Задача
	; Осуществить на процессоре вычисление значения:
	; 1.1 * х1 + 2.2 * х2 + 3.3 * х3 + 4.4 * х4
	; при этом xl = 1, х2 = 2, хЗ = 3, х4 = 4; "х" - массив.
	; Считать, что величины находятся в регистрах процессора Al, А2, Bl, В2 соотв.
	; Результат поместить в регистр А0. Все математические действия должны быть выполнены
	;  вычислительными блоками процессора.

	MV		B3, A10 ; копируем адрес возврата в Си-программу в отдельный регистр, т.к. B3 будет использоваться

	; Инициализация Float-Point констант в теле Асм-подпрограммы
		MVKL .S1 0x3F8CCCCD, A1 ; 1.1 -> A1, загрузка в регистр мл. части (16-разр.) Float-константы (32-разр.)
	|| 	MVKL .S2 0x40533333, B1 ; 3.3 -> B1 (мл. часть)

		MVKH .S1 0x3F8CCCCD, A1 ; 1.1 -> A1, загрузка в регистр ст. части (16-разр.) Float-константы (32-разр.)
	|| 	MVKH .S2 0x40533333, B1 ; 3.3 -> B1 (ст. часть)

		MVKL .S1 0x400CCCCD, A2 ; 2.2 -> A2 (мл. часть)
	|| 	MVKL .S2 0x408CCCCD, B2 ; 4.4 -> B2 (мл. часть)

		MVKH .S1 0x400CCCCD, A2 ; 2.2 -> A2 (ст. часть)
	|| 	MVKH .S2 0x408CCCCD, B2 ; 4.4 -> B2 (ст. часть)

		MV .S1 A4, A7  ; копируем адрес массива "x" (по сути, адрес его первого элемента) в регистр А7 - адресный регистр
	||	MV .S2X A4, B7 ; A7 -> B7, определяем еще один адресный регистр для "Х"


   		LDW .D1T1 *+A7[0], A3 ; или *A7, A3  - загрузка значения в регистр А3 из ячейки памяти по адресу из А7 (считываем первый элемент массива X); x1 -> A3
	||	LDW .D2T2 *+B7[2], B3 ; сдвиг значения адреса на 2 элемента (т.е. сдвиг на 2*4 байт вправо), само значение в B7 не меняется; x3 -> B3

   		LDW .D1T1 *+A7[1], A3 ; сдвиг значения адреса на 1 элемент (т.е. сдвиг на 4 байта вправо), при этом само значение в A7 не меняется; x2 -> A3
	||	LDW .D2T2 *+B7[3], B3 ; сдвиг значения адреса на 1 элемент (т.е. сдвиг на 4 байта вправо), при этом само значение в B7 не меняется; x4 -> B3

   		NOP 3


   		MPYSP .M1 A1, A3, A4 ; 1.1*x1 -> A4
	||	MPYSP .M2 B1, B3, B4 ; 3.3*x3 -> B4

   		MPYSP .M1 A2, A3, A5 ; 2.2*x2 -> A5
	||	MPYSP .M2 B2, B3, B5 ; 4.4*x4 -> B5

		NOP 3


		ADDSP .L1X A4, B4, A6 ; (1.1*x1) + (2.2*x2) -> A6
	||	ADDSP .L2X A5, B5, B6 ; (3.3*x3) + (4.4*x4) -> B6
		NOP 3


		ADDSP .L1X A6, B6, A0 ; ( (1.1*x1) + (2.2*x2) ) + ( (3.3*x3) + (4.4*x4) ) -> A0
		NOP 3

		STW .D1T1 A0, *+A7[4] ; сдвиг значения адреса на 4 элемента (т.е. сдвиг на 4*4 байт вправо)
		NOP					  ;  запись результата в последний элемент массива, т.е. A0 -> x5

		MV		A0, A4 		  ; дублируем результат для вывода через параметр Асм-функции

		B       A10 		  ; выход из Asm-подпрограммы и возвращение в основную Си-программу
		NOP     5



